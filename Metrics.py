# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Jgj-zSWeNf5cdZ9uGULWE0QHtbppNwu
"""


from utils import *
import pandas as pd
import numpy as np
from tqdm import tqdm

df = pd.read_csv('/content/test/cv-corpus-12.0-delta-2022-12-07/en/validated.tsv', sep="\t")

# read the data frame
df.head()

inps = df["path"] #X
outs = df["sentence"] #Y

X = np.array([LoadAudio("/content/test/cv-corpus-12.0-delta-2022-12-07/en/clips/"+x) for x in tqdm(inps, desc='Loading audio files')])

!pip install colorednoise

import colorednoise as cn
def White_noise(x):
  noise_factor = 0.005
  white_noise = np.random.randn(len(x)) * noise_factor
  return  x + white_noise

def Pink_noise(x):
  pink_noise = cn.powerlaw_psd_gaussian(1, len(x))
  return x + pink_noise

def Brown_noise(x):
  brown_noise = cn.powerlaw_psd_gaussian(2, len(x))
  return x + brown_noise

Y = []

for ip in outs:

  y = []
  for i in ip:
      y.append(tokenizer._convert_token_to_id(i))
  Y.append(y)

Y = np.asarray(Y)

pipe, tokenizer = load_model("Validate")

Pred = np.array([tokenizer._convert_token_to_id(transcribe(x, pipe)) for x in X])
WPred = np.array([tokenizer._convert_token_to_id(transcribe(White_noise(x, pipe))) for x in X])
PPred = np.array([tokenizer._convert_token_to_id(transcribe(Pink_noise(x, pipe))) for x in X])
BPred = np.array([tokenizer._convert_token_to_id(transcribe(Brown_noise(x, pipe))) for x in X])

def calculate_metrics(true_words, predicted_words):
    total_words = 0
    error_words = 0
    correct_words = 0

    for true_sentence, predicted_sentence in zip(true_words, predicted_words):
        true_sentence_words = true_sentence
        predicted_sentence_words = predicted_sentence
        total_words += len(true_sentence_words)

        for true_word, predicted_word in zip(true_sentence_words, predicted_sentence_words):
            if true_word != predicted_word:
                error_words += 1
            else:
                correct_words += 1

    wer = (error_words / total_words) * 100
    accuracy = (correct_words / total_words) * 100

    return wer, accuracy
calculate_metrics(Y, WPred)

Pred

